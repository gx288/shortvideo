name: Generate Video

on:
  schedule:
    - cron: '2 8,15,20 * * *' # Runs daily at 2:10, 8:10, 15:10, 20:10 UTC
  workflow_dispatch: # Allows manual triggering

jobs:
  generate-video:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }} # Use PAT for push

      # Cache apt-get packages
      - name: Cache apt-get packages
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives/*.deb
            /var/lib/apt/lists/*.*
          key: apt-cache-${{ runner.os }}-${{ hashFiles('**/video-generation.yml') }}
          restore-keys: |
            apt-cache-${{ runner.os }}-

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ffmpeg fonts-dejavu-core packaging gspread==5.12.0
          ffmpeg -version
        env:
          DEBIAN_FRONTEND: noninteractive

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Pillow==10.4.0 moviepy==1.0.3 requests==2.32.3 numpy==1.26.4 icrawler==0.6.10 google-cloud-texttospeech gspread
          pip show moviepy
          pip show Pillow requests numpy icrawler google-cloud-texttospeech gspread

      # Set up Google TTS credentials
      - name: Set up Google TTS credentials
        env:
          GOOGLE_TTS_KEY: ${{ secrets.GOOGLE_TTS_KEY }}
        run: |
          echo "$GOOGLE_TTS_KEY" > google_tts_key.json
          ls -l google_tts_key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$PWD/google_tts_key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS" >> $GITHUB_ENV

      # Set up Google Sheets credentials
      - name: Set up Google Sheets credentials
        env:
          GOOGLE_SHEETS_KEY: ${{ secrets.GOOGLE_SHEETS_KEY }}
        run: |
          echo "$GOOGLE_SHEETS_KEY" > google_sheets_key.json
          ls -l google_sheets_key.json

      # Run the script
      - name: Run video generation script
        run: python main.py

      # Debug audio
      - name: Debug audio
        if: always()
        run: |
          if [ -f output/voiceover.mp3 ]; then
            ffprobe -v error -show_entries format=duration,bit_rate output/voiceover.mp3
          else
            echo "Error: voiceover.mp3 not found"
          fi

      # Debug video size
      - name: Debug video size
        if: always()
        run: |
          if [ -f output/clean_title.txt ]; then
            CLEAN_TITLE=$(cat output/clean_title.txt)
            VIDEO_PATH="output/output_video_${CLEAN_TITLE}.mp4"
            if [ -f "$VIDEO_PATH" ]; then
              SIZE=$(ls -l $VIDEO_PATH | awk '{print $5}')
              SIZE_MB=$(echo "scale=2; $SIZE / 1024 / 1024" | bc)
              echo "Video size: $SIZE_MB MB"
            else
              echo "Error: Video file $VIDEO_PATH not found"
            fi
          else
            echo "Error: clean_title.txt not found"
          fi

      # Commit video to output folder
      - name: Commit video to output folder
        if: success()
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Ensure output folder exists
          mkdir -p output
          # Add and commit video
          git add output/output_video_*.mp4
          git commit -m "Add video for $TITLE" || echo "No new video to commit"
          git push
        env:
          TITLE: $(cat output/clean_title.txt 2>/dev/null || echo "unknown")

      # Update sheet with raw URL and check file size
      - name: Update sheet with raw URL and file size
        if: success()
        run: python update_sheet.py

      # Cleanup old videos (older than 90 days)
      - name: Cleanup old videos
        if: always()
        run: |
          # Debug: Print working directory and check .git
          pwd
          ls -la
          if [ ! -d ".git" ]; then
            echo "Error: Not a git repository. Exiting cleanup."
            exit 0
          fi
          # Get current timestamp and 90 days ago (in seconds)
          CURRENT_TIME=$(date +%s)
          THREE_MONTHS_AGO=$((CURRENT_TIME - 90*24*60*60))
          # List commits touching output folder
          COMMITS=$(git log --name-only --pretty=format:%H:%ct -- output | grep -B1 'output/output_video_' | grep -v '^--$' | grep -v '^output/' || true)
          DELETED_FILES=false
          while read -r COMMIT_HASH COMMIT_TIME; do
            if [ -n "$COMMIT_HASH" ] && [ -n "$COMMIT_TIME" ] && [ "$COMMIT_TIME" -lt "$THREE_MONTHS_AGO" ]; then
              echo "Found old commit: $COMMIT_HASH at $(date -d @$COMMIT_TIME)"
              # Get files changed in this commit
              FILES=$(git show --name-only --pretty="" $COMMIT_HASH | grep '^output/output_video_.*\.mp4$' || true)
              for FILE in $FILES; do
                echo "Deleting old video: $FILE"
                git rm $FILE || echo "File $FILE already deleted or not found"
                DELETED_FILES=true
              done
            fi
          done <<< "$COMMITS"
          # Commit cleanup if there were deletions
          if [ "$DELETED_FILES" = true ]; then
            git commit -m "Cleanup videos older than 90 days" || echo "No changes to commit"
            git push
          else
            echo "No old videos to clean up"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # Delete videos marked as used in Google Sheet (column I not empty)
      - name: Delete videos marked as used in Google Sheet
        if: always()
        run: |
          python delete_used_videos.py
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
