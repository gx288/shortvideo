name: Generate Video

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch: # Allows manual triggering

jobs:
  generate-video:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip' # Cache pip dependencies for faster runs

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu fonts-liberation gh
          ffmpeg -version
          gh --version

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Pillow==10.4.0 moviepy==1.0.3 requests==2.32.3 numpy==1.26.4 icrawler==0.6.10 google-cloud-texttospeech gspread
          pip show moviepy
          pip show Pillow requests numpy icrawler google-cloud-texttospeech gspread

      # Set up Google TTS credentials
      - name: Set up Google TTS credentials
        env:
          GOOGLE_TTS_KEY: ${{ secrets.GOOGLE_TTS_KEY }}
        run: |
          echo "$GOOGLE_TTS_KEY" > google_tts_key.json
          ls -l google_tts_key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$PWD/google_tts_key.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS" >> $GITHUB_ENV

      # Set up Google Sheets credentials
      - name: Set up Google Sheets credentials
        env:
          GOOGLE_SHEETS_KEY: ${{ secrets.GOOGLE_SHEETS_KEY }}
        run: |
          echo "$GOOGLE_SHEETS_KEY" > google_sheets_key.json
          ls -l google_sheets_key.json

      # Run the script
      - name: Run video generation script
        run: python main.py

      # Upload video as single-file artifact
      - name: Upload video artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: generated-video
          path: output/output_video.mp4
          retention-days: 30
          compression-level: 0

      # Get artifact download URL using gh CLI
      - name: Get artifact URL
        if: success()
        id: get-url
        run: |
          RUN_ID=${{ github.run_id }}
          # Debug: Print full API response
          echo "Fetching artifacts for run $RUN_ID..."
          RESPONSE=$(gh api repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts)
          echo "API Response: $RESPONSE"
          ARTIFACT_URL=$(echo "$RESPONSE" | jq -r '.artifacts[0].archive_download_url // ""')
          if [ -z "$ARTIFACT_URL" ]; then
            echo "Error: Could not retrieve artifact URL"
            exit 1
          fi
          echo "VIDEO_URL=$ARTIFACT_URL" >> $GITHUB_ENV
          echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Update sheet with artifact URL
      - name: Update sheet with artifact URL
        if: success()
        run: python update_sheet.py
        env:
          VIDEO_URL: ${{ steps.get-url.outputs.artifact_url }}
